# tamper_chain.py
from mitmproxy import http
import json
import os
import hashlib

# MITM 활성화 플래그 (초기값 ON)
ENABLE_MITM = True

# 저장 경로
BACKUP_PATH   = "backup_data.json"
TAMPERED_PATH = "chain_data.json"

def compute_hash(block: dict) -> str:
    block_copy = {k: block[k] for k in block if k != "hash"}
    block_str = json.dumps(block_copy, sort_keys=True).encode()
    return hashlib.sha256(block_str).hexdigest()

def request(flow: http.HTTPFlow) -> None:
    """
    클라이언트가 /api/mitm/pause 또는 /api/mitm/resume
    를 호출할 때 ENABLE_MITM 토글하고 바로 응답을 만들어줍니다.
    """
    global ENABLE_MITM

    path = flow.request.path
    if path.endswith("/api/mitm/pause"):
        ENABLE_MITM = False
        flow.response = http.HTTPResponse.make(
            200,
            json.dumps({"mitm_enabled": False}),
            {"Content-Type": "application/json"}
        )
    elif path.endswith("/api/mitm/resume"):
        ENABLE_MITM = True
        flow.response = http.HTTPResponse.make(
            200,
            json.dumps({"mitm_enabled": True}),
            {"Content-Type": "application/json"}
        )

def response(flow: http.HTTPFlow) -> None:
    # /chain 응답만 처리
    if not flow.request.path.endswith("/chain"):
        return

    # ENABLE_MITM이 꺼져 있으면 아무 작업도 안 함
    if not ENABLE_MITM:
        return

    # JSON 파싱
    try:
        original = json.loads(flow.response.content)
    except json.JSONDecodeError:
        return

    # 서버에서 tampered 플래그가 false면 역시 무시
    if not original.get("tampered", False):
        return

    # 1) 원본 백업
    with open(BACKUP_PATH, "w", encoding="utf-8") as f:
        json.dump(original, f, ensure_ascii=False, indent=2)

    # 2) 깊은 복사 및 마지막 블록 변조
    tampered = json.loads(json.dumps(original))
    last_block = tampered["chain"][-1]
    data = last_block.get("data")
    if isinstance(data, dict):
        # 안전하게 username에 _MITM 추가
        data["username"] = (data.get("username") or "") + "_MITM"

    # 3) 해시 재계산
    last_block["hash"] = compute_hash(last_block)

    # 4) 응답 본문 교체
    flow.response.text = json.dumps(tampered)

    # 5) 변조본 저장
    with open(TAMPERED_PATH, "w", encoding="utf-8") as f:
        json.dump(tampered, f, ensure_ascii=False, indent=2)

    print(f"[MITM] chain response tampered and saved to {TAMPERED_PATH}")
